import { ObservableMap, IAction } from 'mobx';
import Base from './Base';
export default class Field extends Base {
    fields: ObservableMap;
    hasInitialNestedFields: boolean;
    incremental: boolean;
    id: any;
    key: any;
    name: any;
    path: any;
    state: any;
    $observers: any;
    $interceptors: any;
    $hooks: {};
    $handlers: {};
    $input: ($: any) => any;
    $output: ($: any) => any;
    $options: any;
    $value: any;
    $type: any;
    $label: any;
    $placeholder: any;
    $default: any;
    $initial: any;
    $bindings: any;
    $extra: any;
    $related: any;
    $validatedWith: any;
    $validators: any;
    $rules: any;
    $disabled: boolean;
    $focused: boolean;
    $touched: boolean;
    $changed: boolean;
    $submitting: boolean;
    $validating: boolean;
    $clearing: boolean;
    $resetting: boolean;
    autoFocus: boolean;
    showError: boolean;
    errorSync: any;
    errorAsync: any;
    validationErrorStack: any[];
    validationFunctionsData: any[];
    validationAsyncData: any;
    files: any;
    debouncedValidation: any;
    disposeValidationOnBlur: any;
    disposeValidationOnChange: any;
    constructor({key, path, data, props, update, state}: {
        key: any;
        path: any;
        data?: {};
        props?: {};
        update?: boolean;
        state: any;
    });
    readonly checkValidationErrors: boolean;
    readonly checked: any;
    value: any;
    initial: any;
    default: any;
    readonly actionRunning: any;
    readonly submitting: boolean;
    readonly validating: boolean;
    readonly type: any;
    readonly label: any;
    readonly placeholder: any;
    readonly extra: any;
    readonly options: any;
    readonly bindings: any;
    readonly related: any;
    readonly disabled: boolean;
    readonly rules: any;
    readonly validators: any;
    readonly validatedValue: any;
    readonly error: any;
    readonly hasError: any;
    readonly isValid: any;
    readonly isDirty: any;
    readonly isPristine: any;
    readonly isDefault: any;
    readonly resetting: any;
    readonly clearing: any;
    readonly isEmpty: any;
    readonly focused: any;
    readonly touched: any;
    readonly changed: any;
    sync: IAction;
    onChange: (...args: any[]) => any[];
    onToggle: (...args: any[]) => any[];
    onBlur: (...args: any[]) => any[];
    onFocus: (...args: any[]) => any[];
    onDrop: (...args: any[]) => any[];
    /**prototypes */
    setupField($key: any, $path: any, $data: any, $props: any, update: any): any;
    getComputedProp(key: any): any;
    checkDVRValidationPlugin(): void;
    initNestedFields(field: any, update: any): void;
    invalidate(message: any, async?: boolean): void;
    setValidationAsyncData(valid?: boolean, message?: string): void;
    resetValidation(deep?: boolean): void;
    clear(deep?: boolean): void;
    reset(deep?: boolean): void;
    focus(): void;
    showErrors(show?: boolean): void;
    showAsyncErrors(): void;
    observeValidationOnBlur(): void;
    observeValidationOnChange(): void;
    initMOBXEvent(type: any): void;
    bind(props?: {}): any;
}
